<Configuration>
  <CodeStyleSettings>
    <ExternalPath IsNull="False">
    </ExternalPath>
    <Sharing>SOLUTION</Sharing>
    <AgentSmithCSharpStyleSettings version="1">
      <CodeStyleSettings xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <CustomDictionaries>
          <Dictionaries>
            <CustomDictionary>
              <Name>en-US</Name>
              <CaseSensitive>false</CaseSensitive>
              <UserWords>Maxfire
Validator
Xunit
Params
Metadata
Validators
Sats
Nullable
Enum
Regex
Aarstal
Html
Unflattener
Instantiator
Util
Json
ini
Csv
ns
txt
Fixedwidth
config
Vejnavne
Produktionsdato
kommune
postnr
sql
dbo
widechar
Noegletal
Kommunale
Kommuner
Init
Filepath
infile
outfile
Emiter
lokaliteter
Bynavne
Postdistrikter
Vuggestue
Boernehave
vejregister
Locator
Beloebsgraenser
Topskattegraense
Progressionsgraense
Topskat
Bundfradrag
Positiv
Nettokapitalindkomst
Personfradrag
Aktieindkomst
Skattesatser
Bundskat
Bundskattesats
Topskattesats
Sundhedsbidrag
Laveste
Hoejeste
Skatteloft
Modregning
Negativ
Satser
Beskaeftigelsesfradrag
Skatteberegning
Loen
Befordringsfradrag
Udgifter
Loenmodtager
Oevrige
Underholdsbidrag
Renteindtaegter
Etableringskonto
Renteudgifter
Kapital
Udbytteindkomst
Anden
Personlig
Indkomst
Faglig
Kommuneskattesats
Kursgevinst
Udbytte
Kirkeskattesats
Arbejdsmarkedsbidrag
Ligningsmaessigefradrag
Befordring
Pensionsordninger
Skibsprojekter
Overskud
Loebende
Ophoer
Fortjeneste
Lejeindtaegter
Bolig
Udlejningsindtaegter
Udlodninger
Indtaegter
Studielaan
Pengeinstitutter
Realkredit
Gaeld
Netto
Fradrag
Gaver
Foreninger
Rejseudgifter
Ratepension
Kapitalpension
Pensionsbidrag
Privat
Ikke
Kontanthjaelp
Arbejdsloeshedsdagpenge
Sygedagpenge
Efterloen
Pensionsudbetalinger
Modtaget
Arbejdsgiver
Indskud
Konto
Ivaerksaetter
Skatteberegner
Beregn
Skattepligtig
Indkomstskat
Samlet
Kirkeskat
Kommuneskat
Aktie
Skattevaerdi
Bund
Groen
tupple
tupples
Beregner
Mellemskat
Grundlag
Sambeskattet
Nedbring
Skattevaerdier
Efter
personfradraget
Beloeb
Personlige
Skatter
Accessor
Skatte
Modregn
Modregner
Resterende
Modregnede
Udnyttet
Egne
Mellemskattesats
Sundhedsbidragsats
Aktieindkomstsats
Fradragsbeloeb
Udnyttede
Underskud
Aktieindkomstskat
Grundbeloebet
Kommunal
Skattesats
Trin
Mellemste
Mellemste
Vaerdier
Beregnet
Modregnet
Modregninger
Overfoert
Omregner
Skattepligtige
reberegnet
Gifte
Ingen
Eksempel
Beregnere
Omregnere
Eksempler
Underskudsvaerdi
indkomster
Restunderskud
Ugift
Fremfoersel
Delvis
Delvis
Fuld
Intet
Fremfoert
Fremfoeres
Hele
Underskuddet
Egen
Aegtefaelle
nulstil
Fuldt
Nedbringelse
Nedbringelse
Skattegrundlag
Beskatning
Pensionsindskud
Ligningsmaessige
Negativt
Positivt
Mulig
Mulige
Skatteloftsats
Uden
Skattelov
stk
Bidrag
Mellem
Brutto
Udnyttelse
Selve
Skatten
Skattenedslagsberegner
Nedslag
Kompensation
Grundbeloeb
maksimal
Oevre
Graense
Stor
Overfoersel
Lettelse
Voksne
Boern
Foedselsdato
personer
Skaerpelse
Skattelettelse
Skatteskaerpelse
Fradragene
</UserWords>
            </CustomDictionary>
          </Dictionaries>
        </CustomDictionaries>
        <StringsDictionary>en-US</StringsDictionary>
        <IdentifierDictionary>en-US</IdentifierDictionary>
        <LastSelectedCustomDictionary>en-US</LastSelectedCustomDictionary>
        <CommentsSettings>
          <DictionaryName>en-US</DictionaryName>
          <CommentMatch>
            <Match>
              <AccessLevel>Public Protected ProtectedInternal</AccessLevel>
              <Declaration>Any</Declaration>
              <IsReadOnly>Maybe</IsReadOnly>
              <IsStatic>Maybe</IsStatic>
              <ParamDirection>Any</ParamDirection>
            </Match>
          </CommentMatch>
          <SuppressIfBaseHasComment>false</SuppressIfBaseHasComment>
          <MaxLineLength>80</MaxLineLength>
        </CommentsSettings>
        <NamingConventionSettings>
          <Rules>
            <NamingConventionRule>
              <IsDisabled>false</IsDisabled>
              <Matches>
                <Match>
                  <AccessLevel>Any</AccessLevel>
                  <Declaration>Class</Declaration>
                  <IsReadOnly>Maybe</IsReadOnly>
                  <IsStatic>Maybe</IsStatic>
                  <ParamDirection>Any</ParamDirection>
                </Match>
                <Match>
                  <AccessLevel>Any</AccessLevel>
                  <Declaration>Enum</Declaration>
                  <MarkedWithAttribute />
                  <IsReadOnly>Maybe</IsReadOnly>
                  <IsStatic>Maybe</IsStatic>
                  <ParamDirection>Any</ParamDirection>
                </Match>
                <Match>
                  <AccessLevel>Any</AccessLevel>
                  <Declaration>EnumerationMember</Declaration>
                  <MarkedWithAttribute />
                  <IsReadOnly>Maybe</IsReadOnly>
                  <IsStatic>Maybe</IsStatic>
                  <ParamDirection>Any</ParamDirection>
                </Match>
              </Matches>
              <NotMatches />
              <Description>Classes, Enumerations, Enumeration values should be named in Pascal</Description>
              <MustHavePrefixes />
              <MustNotHavePrefixes>
                <string>_</string>
                <string>m_</string>
              </MustNotHavePrefixes>
              <Rule>Pascal</Rule>
              <MustHaveSuffixes />
              <MustNotHaveSuffixes />
            </NamingConventionRule>
            <NamingConventionRule>
              <IsDisabled>false</IsDisabled>
              <Matches>
                <Match>
                  <AccessLevel>Public Internal Protected ProtectedInternal</AccessLevel>
                  <Declaration>Property</Declaration>
                  <MarkedWithAttribute />
                  <IsReadOnly>Maybe</IsReadOnly>
                  <IsStatic>Maybe</IsStatic>
                  <ParamDirection>Any</ParamDirection>
                </Match>
                <Match>
                  <AccessLevel>Public Internal Protected ProtectedInternal</AccessLevel>
                  <Declaration>Method</Declaration>
                  <MarkedWithAttribute />
                  <IsReadOnly>Maybe</IsReadOnly>
                  <IsStatic>Maybe</IsStatic>
                  <ParamDirection>Any</ParamDirection>
                </Match>
                <Match>
                  <AccessLevel>Public Internal Protected ProtectedInternal</AccessLevel>
                  <Declaration>Event</Declaration>
                  <MarkedWithAttribute />
                  <IsReadOnly>Maybe</IsReadOnly>
                  <IsStatic>Maybe</IsStatic>
                  <ParamDirection>Any</ParamDirection>
                </Match>
              </Matches>
              <NotMatches />
              <Description>Non private properties, methods, events should be in pascal.</Description>
              <MustHavePrefixes />
              <MustNotHavePrefixes>
                <string>_</string>
                <string>m_</string>
              </MustNotHavePrefixes>
              <Rule>Pascal</Rule>
              <MustHaveSuffixes />
              <MustNotHaveSuffixes />
            </NamingConventionRule>
            <NamingConventionRule>
              <IsDisabled>false</IsDisabled>
              <Matches>
                <Match>
                  <AccessLevel>Private</AccessLevel>
                  <Declaration>Property</Declaration>
                  <MarkedWithAttribute />
                  <IsReadOnly>Maybe</IsReadOnly>
                  <IsStatic>Maybe</IsStatic>
                  <ParamDirection>Any</ParamDirection>
                </Match>
                <Match>
                  <AccessLevel>Private</AccessLevel>
                  <Declaration>Method</Declaration>
                  <MarkedWithAttribute />
                  <IsReadOnly>Maybe</IsReadOnly>
                  <IsStatic>Maybe</IsStatic>
                  <ParamDirection>Any</ParamDirection>
                </Match>
                <Match>
                  <AccessLevel>Private</AccessLevel>
                  <Declaration>Event</Declaration>
                  <MarkedWithAttribute />
                  <IsReadOnly>Maybe</IsReadOnly>
                  <IsStatic>Maybe</IsStatic>
                  <ParamDirection>Any</ParamDirection>
                </Match>
              </Matches>
              <NotMatches />
              <Description>Private properties, methods, events should be in camel.</Description>
              <MustHavePrefixes />
              <MustNotHavePrefixes>
                <string>_</string>
                <string>m_</string>
              </MustNotHavePrefixes>
              <Rule>Camel</Rule>
              <MustHaveSuffixes />
              <MustNotHaveSuffixes />
            </NamingConventionRule>
            <NamingConventionRule>
              <IsDisabled>false</IsDisabled>
              <Matches>
                <Match>
                  <AccessLevel>Any</AccessLevel>
                  <Declaration>Field</Declaration>
                  <MarkedWithAttribute />
                  <IsReadOnly>Maybe</IsReadOnly>
                  <IsStatic>Maybe</IsStatic>
                  <ParamDirection>Any</ParamDirection>
                </Match>
              </Matches>
              <NotMatches>
                <Match>
                  <AccessLevel>Public Protected ProtectedInternal</AccessLevel>
                  <Declaration>Any</Declaration>
                  <IsReadOnly>Maybe</IsReadOnly>
                  <IsStatic>Maybe</IsStatic>
                  <ParamDirection>Any</ParamDirection>
                </Match>
              </NotMatches>
              <Description>Fields should be underscore camel.</Description>
              <MustHavePrefixes>
                <string>_</string>
              </MustHavePrefixes>
              <MustNotHavePrefixes>
                <string>m_</string>
              </MustNotHavePrefixes>
              <Rule>Camel</Rule>
              <MustHaveSuffixes />
              <MustNotHaveSuffixes />
            </NamingConventionRule>
            <NamingConventionRule>
              <IsDisabled>false</IsDisabled>
              <Matches>
                <Match>
                  <AccessLevel>Any</AccessLevel>
                  <Declaration>Variable</Declaration>
                  <IsReadOnly>Maybe</IsReadOnly>
                  <IsStatic>Maybe</IsStatic>
                  <ParamDirection>Any</ParamDirection>
                </Match>
              </Matches>
              <Description>Variable should be declared in camel.</Description>
              <MustHavePrefixes />
              <MustNotHavePrefixes>
                <string>_</string>
                <string>m_</string>
              </MustNotHavePrefixes>
              <Rule>Camel</Rule>
              <MustHaveSuffixes />
              <MustNotHaveSuffixes />
            </NamingConventionRule>
            <NamingConventionRule>
              <IsDisabled>false</IsDisabled>
              <Matches>
                <Match>
                  <AccessLevel>Any</AccessLevel>
                  <Declaration>Parameter</Declaration>
                  <IsReadOnly>Maybe</IsReadOnly>
                  <IsStatic>Maybe</IsStatic>
                  <ParamDirection>Any</ParamDirection>
                </Match>
              </Matches>
              <Description>Function parameters should be in camel.</Description>
              <MustHavePrefixes />
              <MustNotHavePrefixes>
                <string>_</string>
                <string>m_</string>
              </MustNotHavePrefixes>
              <Rule>Camel</Rule>
              <MustHaveSuffixes />
              <MustNotHaveSuffixes />
            </NamingConventionRule>
            <NamingConventionRule>
              <IsDisabled>false</IsDisabled>
              <Matches>
                <Match>
                  <AccessLevel>Any</AccessLevel>
                  <Declaration>Namespace</Declaration>
                  <IsReadOnly>Maybe</IsReadOnly>
                  <IsStatic>Maybe</IsStatic>
                  <ParamDirection>Any</ParamDirection>
                </Match>
              </Matches>
              <Description>Namespaces should be in Pascal.</Description>
              <MustHavePrefixes />
              <MustNotHavePrefixes>
                <string>_</string>
                <string>m_</string>
              </MustNotHavePrefixes>
              <Rule>Pascal</Rule>
              <MustHaveSuffixes />
              <MustNotHaveSuffixes />
            </NamingConventionRule>
            <NamingConventionRule>
              <IsDisabled>false</IsDisabled>
              <Matches>
                <Match>
                  <AccessLevel>Any</AccessLevel>
                  <Declaration>Constant</Declaration>
                  <IsReadOnly>Maybe</IsReadOnly>
                  <IsStatic>Maybe</IsStatic>
                  <ParamDirection>Any</ParamDirection>
                </Match>
              </Matches>
              <Description>Constants should be in capital.</Description>
              <MustHavePrefixes />
              <MustNotHavePrefixes />
              <Rule>UpperCase</Rule>
              <MustHaveSuffixes />
              <MustNotHaveSuffixes />
            </NamingConventionRule>
            <NamingConventionRule>
              <IsDisabled>false</IsDisabled>
              <Matches>
                <Match>
                  <AccessLevel>Any</AccessLevel>
                  <Declaration>Any</Declaration>
                  <IsReadOnly>Maybe</IsReadOnly>
                  <IsStatic>Maybe</IsStatic>
                  <ParamDirection>Any</ParamDirection>
                </Match>
              </Matches>
              <NotMatches>
                <Match>
                  <AccessLevel>Any</AccessLevel>
                  <Declaration>Constant</Declaration>
                  <IsReadOnly>Maybe</IsReadOnly>
                  <IsStatic>Maybe</IsStatic>
                  <ParamDirection>Any</ParamDirection>
                </Match>
              </NotMatches>
              <Description>Acronyms should not have more than 2 characters.</Description>
              <MustHavePrefixes />
              <MustNotHavePrefixes />
              <Rule>MatchesRegex</Rule>
              <MustHaveSuffixes />
              <MustNotHaveSuffixes />
              <Regex>^(?&gt;(XML|SQL|[A-Z]{0,2})[A-Z]?([^A-Z]|$)|[^A-Z]+)*$</Regex>
            </NamingConventionRule>
            <NamingConventionRule>
              <IsDisabled>false</IsDisabled>
              <Matches>
                <Match>
                  <AccessLevel>Any</AccessLevel>
                  <Declaration>Any</Declaration>
                  <IsReadOnly>Maybe</IsReadOnly>
                  <IsStatic>Maybe</IsStatic>
                  <ParamDirection>Any</ParamDirection>
                </Match>
              </Matches>
              <NotMatches>
                <Match>
                  <AccessLevel>Any</AccessLevel>
                  <Declaration>Constant</Declaration>
                  <MarkedWithAttribute />
                  <IsReadOnly>Maybe</IsReadOnly>
                  <IsStatic>Maybe</IsStatic>
                  <ParamDirection>Any</ParamDirection>
                </Match>
                <Match>
                  <AccessLevel>Any</AccessLevel>
                  <Declaration>Field</Declaration>
                  <MarkedWithAttribute />
                  <IsReadOnly>Maybe</IsReadOnly>
                  <IsStatic>Maybe</IsStatic>
                  <ParamDirection>Any</ParamDirection>
                </Match>
                <Match>
                  <AccessLevel>Private</AccessLevel>
                  <Declaration>Method</Declaration>
                  <MarkedWithAttribute />
                  <IsReadOnly>Maybe</IsReadOnly>
                  <IsStatic>Maybe</IsStatic>
                  <ParamDirection>Any</ParamDirection>
                </Match>
                <Match>
                  <AccessLevel>None</AccessLevel>
                  <Declaration>Namespace</Declaration>
                  <IsReadOnly>Maybe</IsReadOnly>
                  <IsStatic>Maybe</IsStatic>
                  <ParamDirection>Any</ParamDirection>
                </Match>
              </NotMatches>
              <Description>Names should not have underscore character</Description>
              <MustHavePrefixes />
              <MustNotHavePrefixes />
              <Rule>NotMatchesRegex</Rule>
              <MustHaveSuffixes />
              <MustNotHaveSuffixes />
              <Regex>(?&lt;remove&gt;_)</Regex>
            </NamingConventionRule>
            <NamingConventionRule>
              <IsDisabled>false</IsDisabled>
              <Matches>
                <Match>
                  <AccessLevel>Any</AccessLevel>
                  <Declaration>Class</Declaration>
                  <MarkedWithAttribute>NUnit.Framework.TestFixtureAttribute</MarkedWithAttribute>
                  <IsReadOnly>Maybe</IsReadOnly>
                  <IsStatic>Maybe</IsStatic>
                  <ParamDirection>Any</ParamDirection>
                </Match>
              </Matches>
              <Description>TestFixtures should end with Test.</Description>
              <MustHavePrefixes />
              <MustNotHavePrefixes>
                <string>Test</string>
              </MustNotHavePrefixes>
              <Rule>None</Rule>
              <MustHaveSuffixes>
                <string>Test</string>
              </MustHaveSuffixes>
              <MustNotHaveSuffixes />
            </NamingConventionRule>
            <NamingConventionRule>
              <IsDisabled>false</IsDisabled>
              <Matches>
                <Match>
                  <AccessLevel>Any</AccessLevel>
                  <Declaration>Method</Declaration>
                  <MarkedWithAttribute>NUnit.Framework.TestAttribute</MarkedWithAttribute>
                  <IsReadOnly>Maybe</IsReadOnly>
                  <IsStatic>Maybe</IsStatic>
                  <ParamDirection>Any</ParamDirection>
                </Match>
              </Matches>
              <Description>Test methods should start with Test.</Description>
              <MustHavePrefixes>
                <string>Test</string>
              </MustHavePrefixes>
              <MustNotHavePrefixes />
              <Rule>None</Rule>
              <MustHaveSuffixes />
              <MustNotHaveSuffixes>
                <string>Test</string>
              </MustNotHaveSuffixes>
            </NamingConventionRule>
            <NamingConventionRule>
              <IsDisabled>false</IsDisabled>
              <Matches>
                <Match>
                  <AccessLevel>Any</AccessLevel>
                  <Declaration>Enum</Declaration>
                  <IsReadOnly>Maybe</IsReadOnly>
                  <IsStatic>Maybe</IsStatic>
                  <ParamDirection>Any</ParamDirection>
                </Match>
              </Matches>
              <Description>Enumerations should not end with Enum.</Description>
              <MustHavePrefixes />
              <MustNotHavePrefixes />
              <Rule>None</Rule>
              <MustHaveSuffixes />
              <MustNotHaveSuffixes>
                <string>Enum</string>
              </MustNotHaveSuffixes>
            </NamingConventionRule>
            <NamingConventionRule>
              <IsDisabled>false</IsDisabled>
              <Matches>
                <Match>
                  <AccessLevel>Any</AccessLevel>
                  <Declaration>EnumerationMember</Declaration>
                  <IsReadOnly>Maybe</IsReadOnly>
                  <IsStatic>Maybe</IsStatic>
                  <ParamDirection>Any</ParamDirection>
                </Match>
              </Matches>
              <Description>Do not name enumerations reserved.</Description>
              <MustHavePrefixes />
              <MustNotHavePrefixes />
              <Rule>NotMatchesRegex</Rule>
              <MustHaveSuffixes />
              <MustNotHaveSuffixes />
              <Regex>(?&lt;remove&gt;(reserved|Reserved))</Regex>
            </NamingConventionRule>
            <NamingConventionRule>
              <IsDisabled>false</IsDisabled>
              <Matches>
                <Match>
                  <AccessLevel>Any</AccessLevel>
                  <Declaration>Event</Declaration>
                  <IsReadOnly>Maybe</IsReadOnly>
                  <IsStatic>Maybe</IsStatic>
                  <ParamDirection>Any</ParamDirection>
                </Match>
              </Matches>
              <Description>Event should not have Before or After prefix.</Description>
              <MustHavePrefixes />
              <MustNotHavePrefixes>
                <string>Before</string>
                <string>After</string>
              </MustNotHavePrefixes>
              <Rule>None</Rule>
              <MustHaveSuffixes />
              <MustNotHaveSuffixes />
            </NamingConventionRule>
            <NamingConventionRule>
              <IsDisabled>false</IsDisabled>
              <Matches>
                <Match>
                  <AccessLevel>Any</AccessLevel>
                  <Declaration>Enum</Declaration>
                  <MarkedWithAttribute>System.FlagsAttribute</MarkedWithAttribute>
                  <IsReadOnly>Maybe</IsReadOnly>
                  <IsStatic>Maybe</IsStatic>
                  <ParamDirection>Any</ParamDirection>
                </Match>
              </Matches>
              <Description>Flags enums should have plural names</Description>
              <MustHavePrefixes />
              <MustNotHavePrefixes />
              <Rule>None</Rule>
              <MustHaveSuffixes>
                <string>s</string>
              </MustHaveSuffixes>
              <MustNotHaveSuffixes />
            </NamingConventionRule>
            <NamingConventionRule>
              <IsDisabled>true</IsDisabled>
              <Matches>
                <Match>
                  <AccessLevel>Any</AccessLevel>
                  <Declaration>Enum</Declaration>
                  <IsReadOnly>Maybe</IsReadOnly>
                  <IsStatic>Maybe</IsStatic>
                  <ParamDirection>Any</ParamDirection>
                </Match>
              </Matches>
              <NotMatches>
                <Match>
                  <AccessLevel>Any</AccessLevel>
                  <Declaration>Enum</Declaration>
                  <MarkedWithAttribute>System.FlagsAttribute</MarkedWithAttribute>
                  <IsReadOnly>Maybe</IsReadOnly>
                  <IsStatic>Maybe</IsStatic>
                  <ParamDirection>Any</ParamDirection>
                </Match>
              </NotMatches>
              <Description>Enums that are not flags should not have plural names</Description>
              <MustHavePrefixes />
              <MustNotHavePrefixes />
              <Rule>None</Rule>
              <MustHaveSuffixes />
              <MustNotHaveSuffixes>
                <string>s</string>
              </MustNotHaveSuffixes>
            </NamingConventionRule>
            <NamingConventionRule>
              <IsDisabled>false</IsDisabled>
              <Matches>
                <Match>
                  <AccessLevel>Any</AccessLevel>
                  <Declaration>Class</Declaration>
                  <InheritedFrom>System.Attribute</InheritedFrom>
                  <IsReadOnly>Maybe</IsReadOnly>
                  <IsStatic>Maybe</IsStatic>
                  <ParamDirection>Any</ParamDirection>
                </Match>
              </Matches>
              <Description>Attribute should end with Attribute.</Description>
              <MustHavePrefixes />
              <MustNotHavePrefixes />
              <Rule>None</Rule>
              <MustHaveSuffixes>
                <string>Attribute</string>
              </MustHaveSuffixes>
              <MustNotHaveSuffixes />
            </NamingConventionRule>
            <NamingConventionRule>
              <IsDisabled>false</IsDisabled>
              <Matches>
                <Match>
                  <AccessLevel>Any</AccessLevel>
                  <Declaration>Class</Declaration>
                  <InheritedFrom>System.EventArgs</InheritedFrom>
                  <IsReadOnly>Maybe</IsReadOnly>
                  <IsStatic>Maybe</IsStatic>
                  <ParamDirection>Any</ParamDirection>
                </Match>
              </Matches>
              <Description>EventArgs should end with EventArgs.</Description>
              <MustHavePrefixes />
              <MustNotHavePrefixes />
              <Rule>None</Rule>
              <MustHaveSuffixes>
                <string>EventArgs</string>
              </MustHaveSuffixes>
              <MustNotHaveSuffixes />
            </NamingConventionRule>
            <NamingConventionRule>
              <IsDisabled>false</IsDisabled>
              <Matches>
                <Match>
                  <AccessLevel>Any</AccessLevel>
                  <Declaration>Class</Declaration>
                  <InheritedFrom>System.Exception</InheritedFrom>
                  <IsReadOnly>Maybe</IsReadOnly>
                  <IsStatic>Maybe</IsStatic>
                  <ParamDirection>Any</ParamDirection>
                </Match>
              </Matches>
              <Description>Exceptions should end with Exception.</Description>
              <MustHavePrefixes />
              <MustNotHavePrefixes />
              <Rule>None</Rule>
              <MustHaveSuffixes>
                <string>Exception</string>
              </MustHaveSuffixes>
              <MustNotHaveSuffixes />
            </NamingConventionRule>
            <NamingConventionRule>
              <IsDisabled>false</IsDisabled>
              <Matches>
                <Match>
                  <AccessLevel>Any</AccessLevel>
                  <Declaration>Class</Declaration>
                  <InheritedFrom>System.Collections.Stack</InheritedFrom>
                  <IsReadOnly>Maybe</IsReadOnly>
                  <IsStatic>Maybe</IsStatic>
                  <ParamDirection>Any</ParamDirection>
                </Match>
                <Match>
                  <AccessLevel>Any</AccessLevel>
                  <Declaration>Class</Declaration>
                  <InheritedFrom>System.Collections.Generic.Stack</InheritedFrom>
                  <MarkedWithAttribute />
                  <IsReadOnly>Maybe</IsReadOnly>
                  <IsStatic>Maybe</IsStatic>
                  <ParamDirection>Any</ParamDirection>
                </Match>
              </Matches>
              <NotMatches />
              <Description>Stack should end with Collection or Stack.</Description>
              <MustHavePrefixes />
              <MustNotHavePrefixes />
              <Rule>None</Rule>
              <MustHaveSuffixes>
                <string>Collection</string>
                <string>Stack</string>
              </MustHaveSuffixes>
              <MustNotHaveSuffixes />
            </NamingConventionRule>
            <NamingConventionRule>
              <IsDisabled>false</IsDisabled>
              <Matches>
                <Match>
                  <AccessLevel>Any</AccessLevel>
                  <Declaration>Class</Declaration>
                  <InheritedFrom>System.Collections.ICollection</InheritedFrom>
                  <IsReadOnly>Maybe</IsReadOnly>
                  <IsStatic>Maybe</IsStatic>
                  <ParamDirection>Any</ParamDirection>
                </Match>
                <Match>
                  <AccessLevel>Any</AccessLevel>
                  <Declaration>Class</Declaration>
                  <InheritedFrom>System.Collections.IEnumerable</InheritedFrom>
                  <IsReadOnly>Maybe</IsReadOnly>
                  <IsStatic>Maybe</IsStatic>
                  <ParamDirection>Any</ParamDirection>
                </Match>
                <Match>
                  <AccessLevel>Any</AccessLevel>
                  <Declaration>Class</Declaration>
                  <InheritedFrom>System.Collections.Generic.ICollection</InheritedFrom>
                  <IsReadOnly>Maybe</IsReadOnly>
                  <IsStatic>Maybe</IsStatic>
                  <ParamDirection>Any</ParamDirection>
                </Match>
              </Matches>
              <NotMatches>
                <Match>
                  <AccessLevel>Any</AccessLevel>
                  <Declaration>Class</Declaration>
                  <InheritedFrom>System.Collections.Stack</InheritedFrom>
                  <IsReadOnly>Maybe</IsReadOnly>
                  <IsStatic>Maybe</IsStatic>
                  <ParamDirection>Any</ParamDirection>
                </Match>
                <Match>
                  <AccessLevel>Any</AccessLevel>
                  <Declaration>Class</Declaration>
                  <InheritedFrom>System.Collections.Queue</InheritedFrom>
                  <IsReadOnly>Maybe</IsReadOnly>
                  <IsStatic>Maybe</IsStatic>
                  <ParamDirection>Any</ParamDirection>
                </Match>
                <Match>
                  <AccessLevel>Any</AccessLevel>
                  <Declaration>Class</Declaration>
                  <InheritedFrom>System.Collections.Generic.Stack</InheritedFrom>
                  <MarkedWithAttribute />
                  <IsReadOnly>Maybe</IsReadOnly>
                  <IsStatic>Maybe</IsStatic>
                  <ParamDirection>Any</ParamDirection>
                </Match>
              </NotMatches>
              <Description>Collections should end with Collection.</Description>
              <MustHavePrefixes />
              <MustNotHavePrefixes />
              <Rule>None</Rule>
              <MustHaveSuffixes>
                <string>Collection</string>
              </MustHaveSuffixes>
              <MustNotHaveSuffixes />
            </NamingConventionRule>
            <NamingConventionRule>
              <IsDisabled>false</IsDisabled>
              <Matches>
                <Match>
                  <AccessLevel>Any</AccessLevel>
                  <Declaration>Class</Declaration>
                  <InheritedFrom>System.Collections.IDictionary</InheritedFrom>
                  <IsReadOnly>Maybe</IsReadOnly>
                  <IsStatic>Maybe</IsStatic>
                  <ParamDirection>Any</ParamDirection>
                </Match>
                <Match>
                  <AccessLevel>Any</AccessLevel>
                  <Declaration>Class</Declaration>
                  <InheritedFrom>System.Collections.Generic.IDictionary</InheritedFrom>
                  <IsReadOnly>Maybe</IsReadOnly>
                  <IsStatic>Maybe</IsStatic>
                  <ParamDirection>Any</ParamDirection>
                </Match>
              </Matches>
              <Description>Dictionary should end with Dictionary.</Description>
              <MustHavePrefixes />
              <MustNotHavePrefixes />
              <Rule>None</Rule>
              <MustHaveSuffixes>
                <string>Dictionary</string>
              </MustHaveSuffixes>
              <MustNotHaveSuffixes />
            </NamingConventionRule>
            <NamingConventionRule>
              <IsDisabled>false</IsDisabled>
              <Matches>
                <Match>
                  <AccessLevel>Any</AccessLevel>
                  <Declaration>Class</Declaration>
                  <InheritedFrom>System.Collections.Queue</InheritedFrom>
                  <IsReadOnly>Maybe</IsReadOnly>
                  <IsStatic>Maybe</IsStatic>
                  <ParamDirection>Any</ParamDirection>
                </Match>
              </Matches>
              <Description>Queue should end with Collection or Queue.</Description>
              <MustHavePrefixes />
              <MustNotHavePrefixes />
              <Rule>None</Rule>
              <MustHaveSuffixes>
                <string>Collection</string>
                <string>Queue</string>
              </MustHaveSuffixes>
              <MustNotHaveSuffixes />
            </NamingConventionRule>
            <NamingConventionRule>
              <IsDisabled>false</IsDisabled>
              <Matches>
                <Match>
                  <AccessLevel>Any</AccessLevel>
                  <Declaration>Interface</Declaration>
                  <IsReadOnly>Maybe</IsReadOnly>
                  <IsStatic>Maybe</IsStatic>
                  <ParamDirection>Any</ParamDirection>
                </Match>
              </Matches>
              <Description>Interfaces should be in Pascal and start with I.</Description>
              <MustHavePrefixes>
                <string>I</string>
              </MustHavePrefixes>
              <MustNotHavePrefixes />
              <Rule>Pascal</Rule>
              <MustHaveSuffixes />
              <MustNotHaveSuffixes />
            </NamingConventionRule>
          </Rules>
          <Exclusions />
        </NamingConventionSettings>
        <IdentifiersToSpellCheck>
          <Match>
            <AccessLevel>Public Protected ProtectedInternal</AccessLevel>
            <Declaration>Any</Declaration>
            <IsReadOnly>Maybe</IsReadOnly>
            <IsStatic>Maybe</IsStatic>
            <ParamDirection>Any</ParamDirection>
          </Match>
        </IdentifiersToSpellCheck>
        <IdentifiersNotToSpellCheck />
        <PatternsToIgnore>
          <string>(?#email)\w+([-+.']\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*</string>
          <string>(?#url)http(s)?://([\w-]+\.)+[\w-]+(/[\w- ./?%&amp;=]*)?</string>
        </PatternsToIgnore>
      </CodeStyleSettings>
    </AgentSmithCSharpStyleSettings>
    <CSharp>
      <FormatSettings>
        <MODIFIERS_ORDER IsNull="False">
          <Item>public</Item>
          <Item>protected</Item>
          <Item>internal</Item>
          <Item>private</Item>
          <Item>new</Item>
          <Item>abstract</Item>
          <Item>virtual</Item>
          <Item>override</Item>
          <Item>sealed</Item>
          <Item>static</Item>
          <Item>readonly</Item>
          <Item>extern</Item>
          <Item>unsafe</Item>
          <Item>volatile</Item>
        </MODIFIERS_ORDER>
        <SPACE_AROUND_MULTIPLICATIVE_OP>True</SPACE_AROUND_MULTIPLICATIVE_OP>
      </FormatSettings>
      <UsingsSettings />
      <Naming2>
        <EventHandlerPatternLong>$object$_On$event$</EventHandlerPatternLong>
        <EventHandlerPatternShort>$event$Handler</EventHandlerPatternShort>
      </Naming2>
    </CSharp>
    <VB>
      <FormatSettings />
      <ImportsSettings />
      <Naming2>
        <EventHandlerPatternLong>$object$_On$event$</EventHandlerPatternLong>
        <EventHandlerPatternShort>$event$Handler</EventHandlerPatternShort>
      </Naming2>
    </VB>
    <Web>
      <Naming2 />
    </Web>
    <Xaml>
      <Naming2 />
    </Xaml>
    <XML>
      <FormatSettings />
    </XML>
    <GenerateMemberBody>
      <MethodImplementationKind>ReturnDefaultValue</MethodImplementationKind>
    </GenerateMemberBody>
    <Naming2>
      <EventHandlerPatternLong>$object$_On$event$</EventHandlerPatternLong>
      <EventHandlerPatternShort>$event$Handler</EventHandlerPatternShort>
      <PredefinedRule Inspect="True" Prefix="" Suffix="" Style="aaBb" ElementKind="Locals" />
      <PredefinedRule Inspect="True" Prefix="" Suffix="" Style="aaBb" ElementKind="Parameters" />
      <PredefinedRule Inspect="False" Prefix="" Suffix="" Style="AaBb" ElementKind="MethodPropertyEvent" />
      <PredefinedRule Inspect="True" Prefix="" Suffix="" Style="AaBb" ElementKind="Constants" />
      <PredefinedRule Inspect="True" Prefix="" Suffix="" Style="AaBb" ElementKind="TypesAndNamespaces" />
      <PredefinedRule Inspect="True" Prefix="I" Suffix="" Style="AaBb" ElementKind="Interfaces" />
      <PredefinedRule Inspect="True" Prefix="T" Suffix="" Style="AaBb" ElementKind="TypeParameters" />
      <PredefinedRule Inspect="True" Prefix="" Suffix="" Style="aaBb" ElementKind="LocalConstants" />
      <PredefinedRule Inspect="False" Prefix="" Suffix="" Style="AaBb" ElementKind="PublicFields" />
      <PredefinedRule Inspect="True" Prefix="" Suffix="" Style="AaBb" ElementKind="StaticReadonly" />
      <PredefinedRule Inspect="True" Prefix="" Suffix="" Style="AaBb" ElementKind="EnumMember" />
      <PredefinedRule Inspect="True" Prefix="" Suffix="" Style="AaBb" ElementKind="Other" />
      <PredefinedRule Inspect="True" Prefix="_" Suffix="" Style="aaBb" ElementKind="PrivateInstanceFields" />
      <PredefinedRule Inspect="True" Prefix="_" Suffix="" Style="aaBb" ElementKind="PrivateStaticFields" />
      <PredefinedRule Inspect="True" Prefix="" Suffix="" Style="AA_BB" ElementKind="PrivateConstants" />
      <PredefinedRule Inspect="True" Prefix="_" Suffix="" Style="aaBb" ElementKind="PrivateStaticReadonly" />
      <Abbreviation Text="DKK" />
      <Abbreviation Text="EUR" />
      <Abbreviation Text="USD" />
      <Abbreviation Text="AM" />
    </Naming2>
  </CodeStyleSettings>
  <SharedSolutionTemplateManager>
    <LiveTemplates>
      <Template uid="8a183cfa-2f7f-4707-9420-15845062606e" shortcut="gsc" description="Generic Specification Context" text="[Context]&#xD;&#xA;public class $CLASS$ : XunitSpec&lt;$CONTEXT$&gt; {$END$}" reformat="True" shortenQualifiedReferences="True">
        <Context>
          <CSharpContext context="Everywhere" minimumLanguageVersion="2.0" />
        </Context>
        <Categories />
        <Variables>
          <Variable name="CLASS" expression="" initialRange="0" />
          <Variable name="CONTEXT" expression="" initialRange="0" />
        </Variables>
        <CustomProperties />
      </Template>
      <Template uid="ee9132d2-0155-46e7-953c-4344cb20b04d" shortcut="le" description="Lambda Expression" text="$VAR$ =&gt; $VAR$$END$" reformat="True" shortenQualifiedReferences="True">
        <Context>
          <CSharpContext context="Everywhere" minimumLanguageVersion="2.0" />
        </Context>
        <Categories />
        <Variables>
          <Variable name="VAR" expression="" initialRange="0" />
        </Variables>
        <CustomProperties />
      </Template>
      <Template uid="a3c47b9d-bce0-46af-9934-538e169c0fdf" shortcut="sc" description="Specification Context" text="[Context]&#xD;&#xA;public class $CLASS$ : XunitSpec {$END$}" reformat="True" shortenQualifiedReferences="True">
        <Context>
          <CSharpContext context="Everywhere" minimumLanguageVersion="2.0" />
        </Context>
        <Categories />
        <Variables>
          <Variable name="CLASS" expression="" initialRange="0" />
        </Variables>
        <CustomProperties />
      </Template>
      <Template uid="37435f4f-edc8-4e5c-853e-cb8f4f28209b" shortcut="spec" description="Specification Method" text="[Specification]&#xD;&#xA;public void $TESTNAME$()&#xD;&#xA;{&#xD;&#xA;	$END$&#xD;&#xA;}" reformat="True" shortenQualifiedReferences="True">
        <Context>
          <CSharpContext context="Everywhere" minimumLanguageVersion="2.0" />
        </Context>
        <Categories />
        <Variables>
          <Variable name="TESTNAME" expression="" initialRange="0" />
        </Variables>
        <CustomProperties />
      </Template>
      <Template uid="cb91b88d-688b-432d-9c34-7059108886aa" shortcut="tc" description="Test Class" text="public class $TESTNAME$&#xD;&#xA;{&#xD;&#xA;	$END$&#xD;&#xA;}" reformat="False" shortenQualifiedReferences="True">
        <Context>
          <CSharpContext context="Everywhere" minimumLanguageVersion="2.0" />
        </Context>
        <Categories />
        <Variables>
          <Variable name="TESTNAME" expression="" initialRange="0" />
        </Variables>
        <CustomProperties />
      </Template>
      <Template uid="1f1e9e5e-ba11-4be7-b102-a41c6f56c8c8" shortcut="tm" description="Test Method" text="[Fact]&#xD;&#xA;public void $TESTNAME$()&#xD;&#xA;{&#xD;&#xA;	$END$&#xD;&#xA;}" reformat="True" shortenQualifiedReferences="True">
        <Context>
          <CSharpContext context="Everywhere" minimumLanguageVersion="2.0" />
        </Context>
        <Categories />
        <Variables>
          <Variable name="TESTNAME" expression="" initialRange="0" />
        </Variables>
        <CustomProperties />
      </Template>
    </LiveTemplates>
  </SharedSolutionTemplateManager>
</Configuration>